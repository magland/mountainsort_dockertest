function main(params) {
	set_default_parameters(params,{
		samplerate:30000, //Hz
		freq_min:800,freq_max:6000,freq_wid:1000,quantization_unit:0, //bandpass filter
		clip_size_msec:2, //clip size for event extraction
		detect_interval_msec:1, //min separation between two events on same channel
		detect_threshold:3.0, //stdevs away from noise
		detect_sign:0, //-1,0,1
		whiten:'true', //boolean
		//consolidate_clusters:1, //boolean
		fit_stage:'false', //boolean
		segment_duration_sec:3600, //duration of a single time segment for processing
		num_threads:0, //number of time segments to process in parallel
		subsample_factor:1,
		multichannel:'false',
		merge_across_channels:'false',
		adjacency_radius:0,
		channels:'', //comma-separated list of channels to analyze
		prescribed_event_times:'' //you can supply your own file of event times (only works for multichannel=false). Otherwise, if empty, it will detect the events as part of processing
	});
	var clip_size=Math.floor(params.clip_size_msec/1000*params.samplerate);

	var inpath=params.inpath;
	var outpath=params.outpath;

	//bandpass filter each session
	var filt;
	var raw;
	//var sessions=[];
	if (file_exists(inpath+'/raw.mda.prv')) {
		raw=inpath+'/raw.mda.prv';
		if (params.channels) {
			raw=extract_channels(raw,params.channels);
			if (params.geom) {
				params.geom=extract_geom_channels(params.geom,params.channels);
			}
		}
		filt=bandpass_filter(raw,params.samplerate,params.freq_min,params.freq_max,params.freq_wid,params.quantization_unit);
	}
	else {
		filt=[];
		/*
		sessions=find_all_sessions(inpath);
		raw=[];
		filt=[];
		for (var i in sessions) {
			var session_path=sessions[i].path;
			var fname=session_path+'/raw.mda.prv';
			if (file_exists(fname)) {
				raw.push(fname);
				var fname2=bandpass_filter(fname,params.samplerate,params.freq_min,params.freq_max,params.freq_wid,params.quantization_unit);
				filt.push(fname2);
				sessions[i].filt=fname2;
				mkdir(outpath+'/'+sessions[i].relpath);
			}
		}
		*/
	}
	if (filt.length===0) {
		//console.err('No raw files or sessions found.');
		console.error('Unable to find raw.mda.prv');
		return;
	}

	var params2=clone(params);
	params2.channels='';
	params2.merge_across_channels='';
	params2.fit_stage='';

	var pre=Process('whiten',{
					timeseries:filt
				},{}
			).timeseries_out;

	var firings;
	if (params.multichannel=='true') {
		var outputs0={firings_out:''};
		params2.fit_stage='false';
		var results0=Process('mountainsort.ms2_001_multichannel',
				{timeseries:filt,geom:params.geom},
				params2,
				outputs0
		);
		firings=results0.firings_out;
		if (params.merge_across_channels=='true') {
			firings=Process('merge_across_channels_v2',{timeseries:filt,firings:firings},{
				clip_size:clip_size
			}).firings_out;
		}
		if (params.fit_stage=='true') {
			
			firings=Process('mountainsort.fit_stage',
				{timeseries:pre,firings:firings},
				{}).firings_out;
		}
	}
	else {
		//pre-sort processing
		var outputs1={event_times_out:'',amplitudes_out:'',clips_out:''}; //specify which outputs to create
		if (params.whiten=='true') outputs1.whitening_matrix_out='';
		var results1=Process('mountainsort.ms2_001',
				{timeseries:filt,prescribed_event_times:params.prescribed_event_times},params2,outputs1
		);

		//the actual sorting
		var outputs2={firings_out:''};
		var results2=Process('mountainsort.ms2_001',
				{
					timeseries:filt,
					clips:results1.clips_out,
					event_times:results1.event_times_out,
					amplitudes:results1.amplitudes_out
				},
				params2,
				outputs2
		);
		firings=results2.firings_out;
	}

	var templates=Process('mountainsort.compute_templates',
		{timeseries:filt,firings:firings},
		{clip_size:clip_size}
	).templates_out;
	firings=Process('mountainsort.reorder_labels',
		{templates:templates,firings:firings},
		{}
	).firings_out;

	var cluster_metrics=Process('mountainsort.cluster_metrics',
			{timeseries:filt,firings:firings},
			{samplerate:params.samplerate,_request_num_threads:params.num_threads}
	).cluster_metrics_out;

	var im_out=Process('mountainsort.isolation_metrics',
			{timeseries:pre,firings:firings},
			{_request_num_threads:params.num_threads},
			{metrics_out:'',pair_metrics_out:''}
	);
	var isolation_metrics=im_out.metrics_out;
	var pair_metrics=im_out.pair_metrics_out;

	cluster_metrics=Process('mountainsort.combine_cluster_metrics',
			{metrics_list:[cluster_metrics,isolation_metrics]},
			{}
	).metrics_out;

	// Write the output
	write_file(firings,params.outpath+'/firings.mda');	
	write_file(cluster_metrics,params.outpath+'/cluster_metrics.json');
	write_file(pair_metrics,params.outpath+'/cluster_pair_metrics.json');
	if (params.geom) {
		write_file(params.geom,params.outpath+'/geom.csv');
	}
	if (typeof(raw)=='string') {
		console.log('################################# '+raw);
		write_prv(raw,params.outpath+'/raw.mda.prv');
		write_prv(filt,params.outpath+'/filt.mda.prv');
	}
	else {
		remove_file(params.outpath+'/raw.mda.prv'); //to be safe
		remove_file(params.outpath+'/filt.mda.prv'); //to be safe
	}

	/*
	if (sessions.length>0) {
		//split the firings
		var firings_out_list=[];
		for (var jj in sessions) {
			write_prv(sessions[jj].path+'/raw.mda.prv',params.outpath+'/'+sessions[jj].relpath+'/raw.mda.prv');
			write_prv(sessions[jj].filt,params.outpath+'/'+sessions[jj].relpath+'/filt.mda.prv');
			write_file(cluster_metrics,params.outpath+'/'+sessions[jj].relpath+'/cluster_metrics.json');
			var tmp=outpath+'/'+sessions[jj].relpath+'/firings.mda';
			firings_out_list.push(tmp);
		}
		Process('mountainsort.split_firings',
				{timeseries_list:filt,firings:params.outpath+'/firings.mda'},
				{},
				{firings_out_list:firings_out_list}
			);
	}
	*/

	run_pipeline();
}

function extract_channels(timeseries,channels) {
	console.log ('extract_channels: '+timeseries+' '+channels);
	
	var ret=Process('mountainsort.extract_neighborhood_timeseries',
		{timeseries:timeseries},
		{channels:channels}
	).timeseries_out;
	return ret;
}

function extract_geom_channels(geom,channels) {
	console.log ('extract_geom_channels: '+geom+' '+channels);
	
	var ret=Process('mountainsort.extract_geom_channels',
		{geom:geom},
		{channels:channels}
	).geom_out;
	return ret;
}

function bandpass_filter(raw,samplerate,freq_min,freq_max,freq_wid,quantization_unit) {
	console.log ('bandpass_filter: '+raw);
	if ((!freq_min)&&(!freq_max)) {
		return raw;
	}
	else {
		var filt=Process('mountainsort.bandpass_filter',
			{timeseries:raw},
			{samplerate:samplerate,freq_min:freq_min,freq_max:freq_max,freq_wid:freq_wid,quantization_unit:quantization_unit}
		).timeseries_out;
		return filt;
	}
}

function find_all_sessions(inpath,relpath) {
	if (!relpath) relpath='';
	var ret=[];
	var dir0=dir(inpath);
	var folders0=dir0.folders||[];
	for (var i in folders0) {
		var fname=inpath+'/'+folders0[i].name+'/raw.mda.prv';
		if (file_exists(fname)) {
			ret.push({path:inpath+'/'+folders0[i].name,relpath:relpath+'/'+folders0[i].name});
		}
		else {
			var ret0=find_all_sessions(inpath+'/'+folders0[i].name,relpath+'/'+folders0[i].name);
			for (var j in ret0)
				ret.push(ret0[j]);
		}
	}
	return ret;
}

function run_pipeline() {
	_MP2.runPipeline();
}

function Process(processor_name,inputs,parameters,outputs) {
	if (!parameters) parameters={};
	if (!outputs) outputs=''; // empty outputs means that they will be created as temporary files and the return object will contain the paths to these temporary files
	var ret=_MP2.addProcess(
		processor_name,
		JSON.stringify(inputs),
		JSON.stringify(parameters),
		JSON.stringify(outputs)
	);
	return JSON.parse(ret);
}

function setNumThreads(num_threads) {
	_MP2.setNumThreads(num_threads);
}

function write_file(input,output) {
	_MP2.addCopyFile(input,output);
	/*
	_MP2.addProcess(
		'copy',
		JSON.stringify({input:input}),
		JSON.stringify({}),
		JSON.stringify({output:output})
	);
	*/
}

function write_prv(input,output) {
	_MP2.addPrv(input,output);
}

function remove_file(path) {
	_MP2.removeFile(path);
}

function clone(obj) {
	return JSON.parse(JSON.stringify(obj));
}

var console={
	log:function(msg) {_MP2.log(msg);},
	err:function(msg) {_MP2.log('Pipeline error: '+msg);}
};

function set_default_parameters(params,defaults) {
	for (var pname in defaults) {
		if (!(pname in params)) {
			params[pname]=defaults[pname];
		}
	}
}


function file_exists(path) {
	return _MP2.fileExists(path);
}

function dir(path) {
	return JSON.parse(_MP2.dir(path));
}

function mkdir(path) {
	_MP2.mkdir(path);
}